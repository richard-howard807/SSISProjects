<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/19/2021 10:28:57 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="L08347"
  DTS:CreatorName="SBC\esmith01"
  DTS:DTSID="{39F1767A-9B81-44D4-83C7-718EBD187121}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3002.113"
  DTS:LocaleID="2057"
  DTS:ObjectName="Gas Compliance Upload"
  DTS:PackageType="5"
  DTS:VersionBuild="35"
  DTS:VersionGUID="{5659EDFF-C8AD-4041-B83E-7466D3B6DAB2}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager]"
      DTS:CreationName="EXCEL"
      DTS:DTSID="{76E3FDD2-83F1-40D5-8FD0-709F750979B2}"
      DTS:ObjectName="Excel Connection Manager">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\svr-liv-fs-06\Restricted\LTA\Litigation\Property Litigation\Riverside Gas\MASTER REFERRAL SPREADSHEET.xlsx;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[svr-liv-dw-01.Visualisation]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{0C9F8C50-FC43-49BD-B8BE-75CE83CF736B}"
      DTS:ObjectName="svr-liv-dw-01.Visualisation">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=svr-liv-dw-01;Initial Catalog=Visualisation;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FF231F25-9F1A-44D5-A738-6325F982F73C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileLocation">
      <DTS:VariableValue
        DTS:DataType="8">\\svr-liv-fs-06\Restricted\LTA\Litigation\Property Litigation\Riverside Gas\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AB3B69A9-088D-4B06-9051-C5C016160E7C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileName">
      <DTS:VariableValue
        DTS:DataType="8">MASTER REFERRAL SPREADSHEET.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{74288512-2F61-44DF-BBBA-1D74FA7A2BCF}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FileLocation]+ @[User::FileName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FilePath">
      <DTS:VariableValue
        DTS:DataType="8">\\svr-liv-fs-06\Restricted\LTA\Litigation\Property Litigation\Riverside Gas\MASTER REFERRAL SPREADSHEET.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{146189BF-1B89-403F-A291-02AC6D6902DB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Password">
      <DTS:VariableValue
        DTS:DataType="8">Riversidegas</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Add Password Protect"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{088BC7C1-6B19-4303-975D-419883E8E2FB}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Add Password Protect"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_23f22938a4844eb1b77cedf83bcf19ce"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="VisualBasic"
          ReadOnlyVariables="User::FilePath,User::Password">
          <ProjectItem
            Name="My Project\AssemblyInfo.vb"
            Encoding="UTF8"><![CDATA[Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' General Information about an assembly is controlled through the following 
' set of attributes. Change these attribute values to modify the information
' associated with an assembly.

' Review the values of the assembly attributes

<Assembly: AssemblyTitle("ST_23f22938a4844eb1b77cedf83bcf19ce")> 
<Assembly: AssemblyDescription("")> 
<Assembly: AssemblyCompany("")> 
<Assembly: AssemblyProduct("ST_23f22938a4844eb1b77cedf83bcf19ce")> 
<Assembly: AssemblyCopyright("Copyright @  2021")> 
<Assembly: AssemblyTrademark("")> 
<Assembly: CLSCompliant(True)> 

<Assembly: ComVisible(False)> 

'The following GUID is for the ID of the typelib if this project is exposed to COM
<Assembly: Guid("dba1efb6-1d32-417d-92e2-92bb99a5d4b2")> 

' Version information for an assembly consists of the following four values:
'
'      Major Version
'      Minor Version 
'      Build Number
'      Revision
'
' You can specify all the values or you can default the Build and Revision Numbers 
' by using the '*' as shown below:
' <Assembly: AssemblyVersion("1.0.*")>

<Assembly: AssemblyVersion("1.0.0.0")> 
<Assembly: AssemblyFileVersion("1.0.0.0")> ]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.vb"
            Encoding="UTF8"><![CDATA[#Region "Help:  Introduction to the script task"
'The Script Task allows you to perform virtually any operation that can be accomplished in
'a .Net application within the context of an Integration Services control flow. 

'Expand the other regions which have "Help" prefixes for examples of specific ways to use
'Integration Services features within this script task.
#End Region


#Region "Imports"
Imports System
Imports System.Data
Imports System.Math
Imports System.Runtime.InteropServices
Imports Microsoft.SqlServer.Dts.Runtime
Imports Microsoft.Office.Interop.Excel
Imports Microsoft.Office.Interop


#End Region

'ScriptMain is the entry point class of the script.  Do not change the name, attributes,
'or parent of this class.
<Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute()>
<System.CLSCompliantAttribute(False)>
Partial Public Class ScriptMain
    Inherits Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase

#Region "Help:  Using Integration Services variables and parameters in a script"
    'To use a variable in this script, first ensure that the variable has been added to 
    'either the list contained in the ReadOnlyVariables property or the list contained in 
    'the ReadWriteVariables property of this script task, according to whether or not your
    'code needs to write to the variable.  To add the variable, save this script, close this instance of
    'Visual Studio, and update the ReadOnlyVariables and 
    'ReadWriteVariables properties in the Script Transformation Editor window.
    'To use a parameter in this script, follow the same steps. Parameters are always read-only.

    'Example of reading from a variable:
    ' startTime = Dts.Variables("System::StartTime").Value

    'Example of writing to a variable:
    ' Dts.Variables("User::myStringVariable").Value = "new value"

    'Example of reading from a package parameter:
    ' batchId = Dts.Variables("$Package::batchId").Value

    'Example of reading from a project parameter:
    ' batchId = Dts.Variables("$Project::batchId").Value

    'Example of reading from a sensitive project parameter:
    ' batchId = Dts.Variables("$Project::batchId").GetSensitiveValue()
#End Region

#Region "Help:  Firing Integration Services events from a script"
    'This script task can fire events for logging purposes.

    'Example of firing an error event:
    ' Dts.Events.FireError(18, "Process Values", "Bad value", "", 0)

    'Example of firing an information event:
    ' Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, fireAgain)

    'Example of firing a warning event:
    ' Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0)
#End Region

#Region "Help:  Using Integration Services connection managers in a script"
    'Some types of connection managers can be used in this script task.  See the topic 
    '"Working with Connection Managers Programatically" for details.

    'Example of using an ADO.Net connection manager:
    ' Dim rawConnection As Object = Dts.Connections("Sales DB").AcquireConnection(Dts.Transaction)
    ' Dim myADONETConnection As SqlConnection = CType(rawConnection, SqlConnection)
    ' <Use the connection in some code here, then release the connection>
    ' Dts.Connections("Sales DB").ReleaseConnection(rawConnection)

    'Example of using a File connection manager
    ' Dim rawConnection As Object = Dts.Connections("Prices.zip").AcquireConnection(Dts.Transaction)
    ' Dim filePath As String = CType(rawConnection, String)
    ' <Use the connection in some code here, then release the connection>
    ' Dts.Connections("Prices.zip").ReleaseConnection(rawConnection)
#End Region

    'This method is called when this script task executes in the control flow.
    'Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
    'To open Help, press F1.

    Public Sub Main()
        '
        Try
            Dim xlApp As Microsoft.Office.Interop.Excel.Application = New Microsoft.Office.Interop.Excel.Application()
            Dim Password As String = Dts.Variables("Password").Value.ToString()
            'Password = "Riversidegas"

            Dim filename As String = Dts.Variables("FilePath").Value.ToString()
            'filename = "\\svr-liv-fs-06\Restricted\LTA\Litigation\Property Litigation\Riverside Gas\MASTER REFERRAL SPREADSHEET - Copy.xlsx"
            xlApp.DisplayAlerts = False
            xlApp.Visible = False
            Dim wbk As Excel.Workbook = xlApp.Workbooks.Open(filename, 0, False, 5, Password, "", False, Excel.XlPlatform.xlWindows, "", True, False, 0, True, False, False)
            'wbk.Unprotect("")
            wbk.Password = Password
            wbk.Save()
            xlApp.Quit()
            Marshal.ReleaseComObject(wbk)
            Marshal.ReleaseComObject(xlApp)
        Catch ex As Exception
            MessageBox.Show(ex.Message.ToString)
            '
            Dts.TaskResult = ScriptResults.Success
        End Try
    End Sub

#Region "ScriptResults declaration"
    'This enum provides a convenient shorthand within the scope of this class for setting the
    'result of the script.

    'This code was generated automatically.
    Enum ScriptResults
        Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success
        Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
    End Enum

#End Region

End Class]]></ProjectItem>
          <ProjectItem
            Name="My Project\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)" GeneratedClassNamespace="$safeprojectname" GeneratedClassName="MySettings">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="My Project\Settings.Designer.vb"
            Encoding="UTF8"><![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



Partial Friend NotInheritable Class MySettings
    Inherits System.Configuration.ApplicationSettingsBase

    Private Shared m_Value As MySettings

    Private Shared m_SyncObject As Object = New Object

    <System.Diagnostics.DebuggerNonUserCode()> _
    Public Shared ReadOnly Property Value() As MySettings
        Get
            If (MySettings.m_Value Is Nothing) Then
                System.Threading.Monitor.Enter(MySettings.m_SyncObject)
                If (MySettings.m_Value Is Nothing) Then
                    Try
                        MySettings.m_Value = New MySettings
                    Finally
                        System.Threading.Monitor.Exit(MySettings.m_SyncObject)
                    End Try
                End If
            End If
            Return MySettings.m_Value
        End Get
    End Property
End Class]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_23f22938a4844eb1b77cedf83bcf19ce</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_23f22938a4844eb1b77cedf83bcf19ce</msb:DisplayName>
    <msb:ProjectId>{E71477F9-50FA-4CD6-A188-02D7417E74D7}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_23f22938a4844eb1b77cedf83bcf19ce.vbproj" />
    <msb:File Include="My Project\AssemblyInfo.vb" />
    <msb:File Include="ScriptMain.vb" />
    <msb:File Include="My Project\Resources.resx" />
    <msb:File Include="My Project\Resources.Designer.vb" />
    <msb:File Include="My Project\Settings.settings" />
    <msb:File Include="My Project\Settings.Designer.vb" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="My Project\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_23f22938a4844eb1b77cedf83bcf19ce.vbproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{F184B08F-C81C-45F6-A57F-5ABD9991F28F}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{B1F3D92F-2506-46B7-ACF5-C55060EE82F2}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>My Project</AppDesignerFolder>
    <RootNamespace>ST_23f22938a4844eb1b77cedf83bcf19ce</RootNamespace>
    <AssemblyName>ST_23f22938a4844eb1b77cedf83bcf19ce</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineDebug>true</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineDebug>false</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <Import Include="Microsoft.VisualBasic" />
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Data" />
    <Import Include="System.Diagnostics" />
    <Import Include="System.Windows.Forms" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="My Project\" />
    <Compile Include="My Project\AssemblyInfo.vb">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="My Project\Resources.resx">
      <Generator>VbMyResourcesResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.vb</LastGenOutput>
      <CustomToolNamespace>My.Resources</CustomToolNamespace>
    </EmbeddedResource>
    <Compile Include="My Project\Resources.Designer.vb">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <None Include="My Project\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.vb</LastGenOutput>
    </None>
    <Compile Include="My Project\Settings.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="ScriptMain.vb">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <COMReference Include="Microsoft.Office.Core">
      <Guid>{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}</Guid>
      <VersionMajor>2</VersionMajor>
      <VersionMinor>8</VersionMinor>
      <Lcid>0</Lcid>
      <WrapperTool>primary</WrapperTool>
      <Isolated>False</Isolated>
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </COMReference>
    <COMReference Include="Microsoft.Office.Interop.Excel">
      <Guid>{00020813-0000-0000-C000-000000000046}</Guid>
      <VersionMajor>1</VersionMajor>
      <VersionMinor>9</VersionMinor>
      <Lcid>0</Lcid>
      <WrapperTool>primary</WrapperTool>
      <Isolated>False</Isolated>
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </COMReference>
    <COMReference Include="VBIDE">
      <Guid>{0002E157-0000-0000-C000-000000000046}</Guid>
      <VersionMajor>5</VersionMajor>
      <VersionMinor>3</VersionMinor>
      <Lcid>0</Lcid>
      <WrapperTool>primary</WrapperTool>
      <Isolated>False</Isolated>
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </COMReference>
  </ItemGroup>
  <!-- Include the build rules for a VB project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.VisualBasic.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="vb" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="My Project\Resources.Designer.vb"
            Encoding="UTF8"><![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace My.Resources
    
    '''<summary>
    '''   A strongly-typed resource class, for looking up localized strings, etc.
    '''</summary>
    'This class was auto-generated by the Strongly Typed Resource Builder
    'class via a tool like ResGen or Visual Studio.NET.
    'To add or remove a member, edit your .ResX file then rerun ResGen
    'with the /str option, or rebuild your VS project.
    Class MyResources
        
        Private Shared _resMgr As System.Resources.ResourceManager
        
        Private Shared _resCulture As System.Globalization.CultureInfo
        
        Friend Sub New()
            MyBase.New
        End Sub
        
        '''<summary>
        '''   Returns the cached ResourceManager instance used by this class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared ReadOnly Property ResourceManager() As System.Resources.ResourceManager
            Get
                If (_resMgr Is Nothing) Then
                    Dim temp As System.Resources.ResourceManager = New System.Resources.ResourceManager("My.Resources.MyResources", GetType(MyResources).Assembly)
                    _resMgr = temp
                End If
                Return _resMgr
            End Get
        End Property
        
        '''<summary>
        '''   Overrides the current thread's CurrentUICulture property for all
        '''   resource lookups using this strongly typed resource class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared Property Culture() As System.Globalization.CultureInfo
            Get
                Return _resCulture
            End Get
            Set
                _resCulture = value
            End Set
        End Property
    End Class
End Namespace]]></ProjectItem>
          <BinaryItem
            Name="ST_23f22938a4844eb1b77cedf83bcf19ce.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDADMx+GAAAAAAAAAAAOAAIiALAVAAACgAAAAIAAAAAAAAgkYA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAADBGAABPAAAAAGAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAiCYAAAAgAAAAKAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAYAAAAAYAAAAqAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAMAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABk
RgAAAAAAAEgAAAACAAUASCMAADAiAAABAAAAAAAAAHhFAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKCEAAAoqHgIoIgAACiqmcyMAAAqAAQAABHMkAAAKgAIA
AARzJQAACoADAAAEcyYAAAqABAAABCoufgEAAARvJwAACioufgIAAARvKAAACioufgMAAARvKQAA
CioufgQAAARvKgAACioeAigrAAAKKq5+BQAABC0ecgEAAHDQBQAAAigsAAAKby0AAApzLgAACoAF
AAAEfgUAAAQqGn4GAAAEKh4CgAYAAAQqQnMrAAAKKC8AAAqACAAABCoeAigwAAAKKgAAGzABAD8A
AAAAAAAAfgcAAAQtMn4IAAAEKC8AAAooMQAACn4HAAAELRxzDQAABoAHAAAE3hB+CAAABCgvAAAK
KDIAAArcfgcAAAQqAAEQAAACAB0ADCkAEAAAAAAeAigzAAAKKhswEQAPAQAAAQAAEXIzAABwczQA
AAooNQAACig2AAAKdAoAAAICKDcAAApvOAAACnJ9AABwbzkAAApvOgAACm87AAAKCgIoNwAACm84
AAAKco8AAHBvOQAACm86AAAKbzsAAAoLJRZvGwAABiUWbyAAAAYlbxYAAAYHFow6AAABFow7AAAB
G4w6AAABBnKhAABwFow7AAABGIwPAAACcqEAAHAXjDsAAAEWjDsAAAEWjDoAAAEXjDsAAAEWjDsA
AAEWjDsAAAFvFAAABgwIBm8lAAAGCG8iAAAGJW8dAAAGCCg8AAAKJig8AAAKJt4rJSg9AAAKDQlv
PgAACm8/AAAKKEAAAAomAig3AAAKFm9BAAAKKEIAAAreACoAARAAAAAAAADj4wArJQAAATYCAygv
AAAKKEMAAAoqHgIoRAAACiou0BIAAAIoLAAACioeAig7AAAKKgAAEzABABQAAAACAAARAowFAAAb
LQgoAQAAKworAgIKBioiA/4VBQAAGyoAAAATMAIAKAAAAAMAABECe0YAAApvRwAACgoGjAgAABst
EigCAAArCgJ7RgAACgZvSAAACgYqSgIoKwAACgJzSQAACn1GAAAKKgBCU0pCAQABAAAAAAAMAAAA
djQuMC4zMDMxOQAAAAAFAGwAAABADQAAI34AAKwNAACQDAAAI1N0cmluZ3MAAAAAPBoAAKQAAAAj
VVMA4BoAABAAAAAjR1VJRAAAAPAaAABABwAAI0Jsb2IAAAAAAAAAAgAAAVc/ogkJDwAAAPoBMwAW
AAABAAAAPwAAABQAAAAQAAAALgAAABwAAAAFAAAASQAAAAUAAAByAAAAFgAAAAMAAAAHAAAADgAA
ABIAAAAIAAAAAQAAAAYAAAABAAAAAwAAAAMAAAACAAAAAABOBwEAAAAAAAYANAURCgYA6gURCgYA
rQNSCQ8AtwoAAAYA7gMaCAYA6AQaCAYA0QUaCAYAZQUaCAYAfgUaCAYATAQaCAYAmQV/BwYA2gPL
CQYAOwPLCQYAmAQaCAYAZwRJBgoAeQO2CAoA+wI4BwoAwQM4Bw4A0wKhCQ4AAAllCQYAgARSCQ4A
BQTqCQ4AHQQwAQYAugt/Bw4A0gihCQ4AzQQwAQYAhgJ/Bw4AQQDdBgoASQOjBwYApggxCgYANggF
CAoA4wLwBwYAkANSCRIArwWmBhIAtwKmBgYAeAZ/BwYALAh/BwYAkQd/BwYAIAMRCgYANQTLCQYA
HAXLCQYAXgPLCQYAVAXLCQYABQUaCAYACQIVCwYAEAPLCQYAtQTLCQYANgJ/BwYAfgwaCAYAKAsR
CgYASgk4BgYAbAF/BwYA1QbLCQYAMwl/BxIAJgemBhYAygpjAhYAAAJjAgYAawB/BwYAlgd/Bw4A
GwHqCQYAZQZ/BxoAQQwACxoA4gsACwAAAAClAAAAAAABAAEAAAAAAOIHTAxNAAEAAQAAAAAA/ghM
DFEAAQACAAABEADBC0wMYQABAAMAAAAAAHMKQgphAAUACAAAARAA1AqcAYEABwAMAAEAAADAB5wB
jQAJAA8AoRAAAGQLBwcAAAkAEQChEAAAEwwHBwAACQARAKEQAADkBwcHAAAJABEAoRAAAH4GBwcA
AAkAEQChEAAAVQsHBwAACQARAKEQAAD+CwcHAAAJABEAoRAAAO8KBwcAAAkAEQABAQAAhgcHB5kA
CQAVAKEQAADVBwcHAAANABUAoRAAAH0GBwcAAA0AIQAFAQAAkwkAAGEADQAmAAUBAABQAAAAYQAN
AC0AAgEAAEcLAACZAA4ALwAxAGsIRgExAEIITgExAFYIVgExAIQIXgERAAkJZgERAKsCagERAAgG
bgERAKMLcgEGBhMBdQFWgGwGeAFWgMMAeAFWgJILeAEhACMM9AAGBhMBdQFWgDcLfAFWgIsCfAFQ
IAAAAAAGGD0JBgABAFggAAAAAAYYPQkGAAEAYCAAAAAAERhDCcgAAQCKIAAAAAATCPEIgAEBAJYg
AAAAABMI0geFAQEAoiAAAAAAEwjOCIoBAQCuIAAAAAATCIMJjwEBALogAAAAAAMYPQkGAAEAwiAA
AAAAFgiiCJQBAQDuIAAAAAAWCJMCmQEBAPUgAAAAABYInwKeAQEA/SAAAAAAERhDCcgAAgAOIQAA
AAAGGD0JBgACABghAAAAABYIEAakAQIAdCEAAAAABhg9CQYAAgB8IQAAAAAGAMYHBgACAAAAAAAD
AAYYAQAGAAIAAAAAAAMQxg3VC6kBAgAAAAAAAwAGGDUABgAEAAAAAAADEMYFngevAQQAAAAAAAMA
BhhxAAYAFAAAAAAAAxDGDesKwwEUAAAAAAADAAYYDgAGABUAAAAAAAMQxg3VC7EAFQAAAAAAAwAG
GIsABgAWAAAAAAADEMYNbgvIARYAAAAAAAMQxg2ACxUAFgAAAAAAAwAGGJcABgAXAAAAAAADEMYF
ywsGABcAAAAAAAMABhgoAAYAFwAAAAAAAxDGDR4CyAEXAAAAAAADEMYNKgIVABcAAAAAAAMABhh+
AAYAGAAAAAAAAxDGBTMGBgAYAAAAAAADAAYYGwAGABgAAAAAAAMQxg1xAbEAGAAAAAAAAxDGDX4B
EAAZAKgiAAAAAMYC+QrMABoAtiIAAAAAxgLoAdEAGwC+IgAAAACDAIMCzAEbAMoiAAAAAMYCYwax
ABsA1CIAAAAAEQAAAdEBGwD0IgAAAAABAOwA2QEcALogAAAAAAYYPQkGAB0AACMAAAAAAwjPAV0A
HQA0IwAAAAAGGD0JBgAdAAAAAQAtBgAgAAAAAAEgAQA7DAAgAAAAAAEgAQBaAhEgAgDfChEgAwCH
DBEgBACcCxEgBQCTAREgBgCLAREgBwBSAREgCADLBxEgCQDXCBEgCgAVAhEgCwBzDBEgDADnCBEg
DQAtDBEgDgDPBhEgDwBGAQAgAAAAAAAgAAAAAAEAAQC/AAEAAQC/AAAgAAAAAAEgAQC/AAAAAQBA
CAAAAQDfAQAAAQDfAQoAQAAKACQACwBEAAsANAAOALUACQA9CQEAEQA9CQYAGQA9CQoAKQA9CRAA
MQA9CRAAOQA9CRAAQQA9CRAASQA9CRAAUQA9CRAAWQA9CRUAYQA9CRUAaQA9CRAAcQA9CRAAeQA9
CRAAgQA9CRoAkQA9CSAAqQA9CQYAsQA9CQYAuQA9CQYA0QA9CSYA6QA9CRAACQE9CQYAEQE9CQYA
OQE9CQYAQQE9CS4ASQE9CQYAUQE9CTMASQE9CRoAWQE9CTsAYQE9CRAAcQE9CQEAeQE9CQEAmQA9
CQYAoQA9CQYADAA9CQYAFAA9CQYAHAA9CQYAJAA9CQYADADPAV0AFADPAV0AHADPAV0AJADPAV0A
wQA9CQYA2QBIAmIA2QB6DGoA8QA9CXAAkQEkBngAAQE9CQYAmQHhCH0AmQHQC30AGQE9CQYAoQE9
CRAAqQGuAIwAsQHAAZQAGQE/C5oAuQHGCqAAwQF2B6YAyQEQBq0AwQBjBrEAqQGwC7UA4QEjCboA
KQH0AbEA6QFjBrEA8QE2DMEAuQHvCwEA4QERCcgAwQD5CswAwQDoAdEAsQHAAd0ANAAjDPQAPAAQ
Bl0APAAaBgsBPAA9CQYACAAoACwBCAAsADEBCAAwADYBCAA8ADsBCABAACwBKQCrAPkGLgALABwC
LgATACUCLgAbAEQCLgAjAE0CLgArAHYCLgAzAHYCLgA7AE0CLgBDAHwCLgBLAHYCLgBTAJMCLgBb
AHYCLgBjAJkCLgBrAMMCLgBzANACQACLACwBQACDABoDQwB7AHQDQwCDABoDSQCrAAoHYwB7AHQD
YwCDABoDaQCrAB4HgACLACwBgwCTACwBgwCbACwBgwB7AHQDiQCrACsHoACLACwBqQCDAEQCwACL
ACwByQCDAEQC4ACLACwB4wC7ACwB4wBTAHYC6QCzACwBAwHDACwBAwHLAI0DAwFjAJQDAwHTACwB
CQH7ACMDIwHDACwBIwHbAL4DIwHjABUEKQH7AD4DQwHDACwBQwFjAG4EQwHrAJgEQwHTACwBSQH7
ACMDYwHDACwBYwFjAPgEYwHrAJgEYwHTACwBaQH7AEcDgwHDACwBgwFjACIFgwHLAI0DgwHTACwB
iQH7AFkDowHDACwBowHbAEwFowHjAK0FqQH7AGsDwwHDACwBwwFjAAsGwwHzADUGwwHTACwB4wHD
ACwB4wHjAEMGAwLDACwBAwLzADUGAwJjAG4EAwLTACwBIwLDACwBIwJjAPgEIwLTACwBQAL7ACMD
QwKDABoDQwKjAJcGYwKDABoDYwJbAHYCgAL7ACwDgAIDATUDwAL7AD4DAAP7ACMDQAP7AEcDQAMD
ASMDYAMDASMDYAP7AEcDoAP7AFAD4AMDASMD4AP7AFkDAAQDASMDAAT7AFkDQAT7AGIDQAQDASMD
gAT7AGsDoAT7AGsDwASDABoDwASLACwB4ASDABoD4ASLACwBAAWDABoDAAWLACwBIAWDABoDIAWL
ACwBQAWLACwBYAWLACwBgAWLACwBgAWDABoDoAWLACwBwAWLACwBwAWDABoDBQBAAQcAQgEJAEAB
CwBEAQ0AQgEPAEIBEQBCARMAQgEVAEIBFwBCARkAQgEbAEIBHQBCAR8AQgEhAEIBIwBCASUAQgEn
AEIBKQBAASsARAExAEQBMwBEAYIA1QDoAAQAAQAFAAUABgAHAA4ACAAQAAkAEQANABMADgAAAAAJ
4QEAAOQH5gEAANII6wEAAJUJ8AEAAKYI9QEAAK8C+gEAAC0G/wEAANkLBAIAAO8KCgIAANkLDwIA
AIQLEwIAAC4CEwIAAJMBDwIAANMBFwICAAQAAwACAAUABQACAAYABwACAAcACQACAAkACwACAAoA
DQABAAsADQACAA4ADwACABIAEQACABYAEwACABgAFQACABoAFwABABsAFwACAB8AGQABACAAGQAC
ACQAGwABACUAGwACAC0AHQBBAEgATwBWANoA7QD8AAMBBIAAAAEAAAAAAAAAAAAAAAAAnAEAAAQA
AAAAAAAAAAAAABEBJwEAAAAABAAAAAAAAAAAAAAAEQF/BwAAAAAKAAAAAAAAAAAAAAAaATABAAAA
AA4AAAAAAAAAAAAAACMBhwYAAAAADgAAAAAAAAAAAAAAIwHLAAAAAAAEAAAAAAAAAAAAAAARAQAL
AAAAAAAAAAABAAAAfwoAABIABAATAAQAFAAHAAAAEAAmAOoAAAAQAFUA6gAAAAAAVwDqAIsA4wCL
AAYBAAAAAABfVnRibEdhcDFfMTAAX1Z0YmxHYXAyXzYwAF9WdGJsR2FwMl84MABfVnRibEdhcDVf
NTEAX1Z0YmxHYXAyXzEAQ29udGV4dFZhbHVlYDEAVGhyZWFkU2FmZU9iamVjdFByb3ZpZGVyYDEA
SW50MzIAX1Z0YmxHYXAxXzQ1AF9WdGJsR2FwMV85NQBfVnRibEdhcDNfNQBfVnRibEdhcDRfMTA5
ADxNb2R1bGU+AEdldFR5cGVGcm9tQ0xTSUQAUkhTAHhsTVNET1MATWljcm9zb2Z0LlNxbFNlcnZl
ci5NYW5hZ2VkRFRTAFQARGlzcG9zZV9fSW5zdGFuY2VfXwBDcmVhdGVfX0luc3RhbmNlX18AdmFs
dWVfXwBQcm9qZWN0RGF0YQBtc2NvcmxpYgBNaWNyb3NvZnQuVmlzdWFsQmFzaWMAQ29ycnVwdExv
YWQASWdub3JlUmVhZE9ubHlSZWNvbW1lbmRlZABHdWlkAGdldF9QYXNzd29yZABzZXRfUGFzc3dv
cmQAV3JpdGVSZXNQYXNzd29yZABTVF8yM2YyMjkzOGE0ODQ0ZWIxYjc3Y2VkZjgzYmNmMTljZQBD
cmVhdGVJbnN0YW5jZQBnZXRfR2V0SW5zdGFuY2UAaW5zdGFuY2UAR2V0SGFzaENvZGUAZ2V0X01l
c3NhZ2UAVmFyaWFibGUASUVudW1lcmFibGUARWRpdGFibGUAZ2V0X1Zpc2libGUAc2V0X1Zpc2li
bGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUARmlsZW5hbWUATWljcm9zb2Z0
LlNxbFNlcnZlci5EdHMuUnVudGltZQBHZXRUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1
bHR1cmUAX3Jlc0N1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxpY2F0aW9u
QmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBEaXNwSWRB
dHRyaWJ1dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUAR3VpZEF0dHJpYnV0ZQBIZWxwS2V5
d29yZEF0dHJpYnV0ZQBDb21FdmVudEludGVyZmFjZUF0dHJpYnV0ZQBHZW5lcmF0ZWRDb2RlQXR0
cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBF
ZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQ29tVmlzaWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxl
QXR0cmlidXRlAFN0YW5kYXJkTW9kdWxlQXR0cmlidXRlAEhpZGVNb2R1bGVOYW1lQXR0cmlidXRl
AEludGVyZmFjZVR5cGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0
RnJhbWV3b3JrQXR0cmlidXRlAERlYnVnZ2VySGlkZGVuQXR0cmlidXRlAEFzc2VtYmx5RmlsZVZl
cnNpb25BdHRyaWJ1dGUATENJRENvbnZlcnNpb25BdHRyaWJ1dGUATXlHcm91cENvbGxlY3Rpb25B
dHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBEZWZhdWx0TWVtYmVyQXR0cmli
dXRlAFR5cGVJZGVudGlmaWVyQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1
dGUAQ29DbGFzc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5
cmlnaHRBdHRyaWJ1dGUAQ0xTQ29tcGxpYW50QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQ
b2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxp
dHlBdHRyaWJ1dGUAbV9WYWx1ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAEdldE9iamVjdFZhbHVlAFNh
dmUAU3lzdGVtLlRocmVhZGluZwBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAHhs
TWFjaW50b3NoAE1hdGgAX1dvcmtib29rAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBN
aWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAExvY2FsAE1hcnNoYWwATWlj
cm9zb2Z0LlZpc3VhbEJhc2ljLk15U2VydmljZXMuSW50ZXJuYWwATWljcm9zb2Z0Lk9mZmljZS5J
bnRlcm9wLkV4Y2VsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF8y
M2YyMjkzOGE0ODQ0ZWIxYjc3Y2VkZjgzYmNmMTljZS5kbGwAZ2V0X0l0ZW0AU3lzdGVtAFhsUGxh
dGZvcm0ARW51bQBCb29sZWFuAE9wZW4AU3lzdGVtLkNvbXBvbmVudE1vZGVsLkRlc2lnbgBTY3Jp
cHRNYWluAE9yaWdpbgBnZXRfQXBwbGljYXRpb24ATXlBcHBsaWNhdGlvbgBTeXN0ZW0uQ29uZmln
dXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBFeGNlcHRpb24A
Q3VsdHVyZUluZm8AbV9BcHBPYmplY3RQcm92aWRlcgBtX1VzZXJPYmplY3RQcm92aWRlcgBtX0Nv
bXB1dGVyT2JqZWN0UHJvdmlkZXIAbV9NeVdlYlNlcnZpY2VzT2JqZWN0UHJvdmlkZXIAZ2V0X1Jl
c291cmNlTWFuYWdlcgBTeXN0ZW0uQ29kZURvbS5Db21waWxlcgBnZXRfVXNlcgBEZWxpbWl0ZXIA
RW50ZXIAQ29udmVydGVyAGdldF9Db21wdXRlcgBNeUNvbXB1dGVyAF9yZXNNZ3IAQ2xlYXJQcm9q
ZWN0RXJyb3IAU2V0UHJvamVjdEVycm9yAEFjdGl2YXRvcgAuY3RvcgAuY2N0b3IATW9uaXRvcgBT
eXN0ZW0uRGlhZ25vc3RpY3MATWljcm9zb2Z0LlZpc3VhbEJhc2ljLkRldmljZXMAZ2V0X1dlYlNl
cnZpY2VzAE15V2ViU2VydmljZXMATWljcm9zb2Z0LlZpc3VhbEJhc2ljLkFwcGxpY2F0aW9uU2Vy
dmljZXMAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzAE1pY3Jvc29mdC5WaXN1YWxCYXNp
Yy5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVt
LlJlc291cmNlcwBTVF8yM2YyMjkzOGE0ODQ0ZWIxYjc3Y2VkZjgzYmNmMTljZS5NeS5SZXNvdXJj
ZXMATXlSZXNvdXJjZXMAU1RfMjNmMjI5MzhhNDg0NGViMWI3N2NlZGY4M2JjZjE5Y2UuUmVzb3Vy
Y2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBnZXRfVmFyaWFibGVzAE15U2V0dGluZ3MAVXBk
YXRlTGlua3MAZ2V0X1dvcmtib29rcwBFcXVhbHMAU3lzdGVtLldpbmRvd3MuRm9ybXMAU3lzdGVt
LkNvbGxlY3Rpb25zAFJ1bnRpbWVIZWxwZXJzAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRz
AFdvcmtib29rRXZlbnRzAEFwcEV2ZW50cwBnZXRfRGlzcGxheUFsZXJ0cwBzZXRfRGlzcGxheUFs
ZXJ0cwB4bFdpbmRvd3MARm9ybWF0AG1fU3luY09iamVjdABSZWxlYXNlQ29tT2JqZWN0AE15UHJv
amVjdABRdWl0AEV4aXQAZ2V0X19EZWZhdWx0AERpYWxvZ1Jlc3VsdABzZXRfVGFza1Jlc3VsdABX
b3JrYm9va0V2ZW50c19FdmVudABBcHBFdmVudHNfRXZlbnQAbV9Db250ZXh0AEFkZFRvTXJ1AFNo
b3cASW5kZXgATWVzc2FnZUJveABTVF8yM2YyMjkzOGE0ODQ0ZWIxYjc3Y2VkZjgzYmNmMTljZS5N
eQBOb3RpZnkAZ2V0X0Fzc2VtYmx5AFJlYWRPbmx5AAAxTQB5AC4AUgBlAHMAbwB1AHIAYwBlAHMA
LgBNAHkAUgBlAHMAbwB1AHIAYwBlAHMAAEkwADAAMAAyADQANQAwADAALQAwADAAMAAwAC0AMAAw
ADAAMAAtAEMAMAAwADAALQAwADAAMAAwADAAMAAwADAAMAAwADQANgABEVAAYQBzAHMAdwBvAHIA
ZAAAEUYAaQBsAGUAUABhAHQAaAAAAQAAqZOnl96WV0GcCu3V9hHWIgAEIAEBCAMgAAEFIAEBEREE
IAEBDgQgAQECBSACAQ4OBSABARFFByAEAQ4ODg4EIAEBBgcgAgESbRJtBSABARJtBhUSTAESDAYV
EkwBEggGFRJMARJlBhUSTAESSAQgABMABwABEm0RgMEFIAASgMUHIAIBDhKAxQQAARwcBAABARwJ
BwQODhIsEoCVBwABEm0RgNEFAAEcEm0FIAASgN0FIAASgOEGIAESgOUcAyAAHAMgAA4EAAEIHAYA
AQESgJUGAAERgP0OAwAAAQQgAQIcAyAACAQHAR4AAh4ABRABAB4ABAoBHgAEBwETAAYVEkwBEwAH
BhUScQETAAYVEnEBEwACEwAECgETAAUgAQETAAi3elxWGTTgiQiwP19/EdUKOgiJhF3NgIDMkQQB
AAAABAMAAAAEAgAAAAQAAAAAARwBGwETBwYVEkwBEgwHBhUSTAESCAcGFRJMARJlBwYVEkwBEkgD
BhJ5AwYSfQMGEhgCBhwCBggDBhE8AwYRUAQAABIMBAAAEggEAAASZQQAABJIBAAAEnkEAAASfQUA
AQESfQQAABIYBSABEiwcEyAPEiwOHBwcHBwcHBwcHBwcHBwEIAASOAMgAAIEIAASbQcQAQEeAB4A
BzABAQEQHgAECAASDAQIABIIBAgAEmUECAASSAQIABJ5BAgAEn0ECAASGAUIARIsHAQIABI4AwgA
DgMIAAIEKAATAAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAA
AAAoAQAjU1RfMjNmMjI5MzhhNDg0NGViMWI3N2NlZGY4M2JjZjE5Y2UAAAUBAAAAABYBABFDb3B5
cmlnaHQgQCAgMjAyMQAABQEAAQAAKQEAJGRiYTFlZmI2LTFkMzItNDE3ZC05MmUyLTkyYmI5OWE1
ZDRiMgAADAEABzEuMC4wLjAAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJh
bWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41CAEAAQAAAAAACAEAAAAAAAAACAEA
gwcAAAAACAEADwAAAAAACAEAPAIAAAAACAEAVwEAAAAACAEALgEAAAAACAEALgIAAAAACAEAGwEA
AAAACAEArQEAAAAAGAEACk15VGVtcGxhdGUIMTEuMC4wLjAAAAYBAAIAAAApAQAkMDAwMjQ0MTMt
MDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2AABWAQAoTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9w
LkV4Y2VsLkFwcEV2ZW50cyhNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhjZWwuQXBwRXZlbnRz
AABYAQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2Lk1pY3Jvc29mdC5PZmZp
Y2UuSW50ZXJvcC5FeGNlbC5BcHBFdmVudHNfRXZlbnQAACkBACQwMDAyMDhENS0wMDAwLTAwMDAt
QzAwMC0wMDAwMDAwMDAwNDYAAF8BAFpTeXN0ZW0uT2JqZWN0LCBtc2NvcmxpYiwgVmVyc2lvbj00
LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkA
ACkBACQwMDAyMDhEQS0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAACkBACQwMDAyNDQxMi0w
MDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAAGABAC1NaWNyb3NvZnQuT2ZmaWNlLkludGVyb3Au
RXhjZWwuV29ya2Jvb2tFdmVudHMtTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLkV4Y2VsLldvcmti
b29rRXZlbnRzAABdAQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2M01pY3Jv
c29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5Xb3JrYm9va0V2ZW50c19FdmVudAAAKQEAJDAwMDIw
OERCLTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAADQEACF9EZWZhdWx0AABTAQAkMDAwMjA4
MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2KU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5F
eGNlbC5YbFBsYXRmb3JtAABhAQA0U3lzdGVtLldlYi5TZXJ2aWNlcy5Qcm90b2NvbHMuU29hcEh0
dHBDbGllbnRQcm90b2NvbBJDcmVhdGVfX0luc3RhbmNlX18TRGlzcG9zZV9fSW5zdGFuY2VfXwAA
ABABAAtNeS5Db21wdXRlcgAAEwEADk15LkFwcGxpY2F0aW9uAAAMAQAHTXkuVXNlcgAAEwEADk15
LldlYlNlcnZpY2VzAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNl
UmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1Ymxp
Y0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3Vy
Y2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAFhGAAAAAAAAAAAAAHJGAAAAIAAAAAAAAAAAAAAA
AAAAAAAAAAAAAABkRgAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAg
ABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAY
AACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAAOwD
AAAAAAAAAAAAAOwDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAAB
AAAAAQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIA
RgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARM
AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAANABiADAA
AAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBl
AAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADIA
MwBmADIAMgA5ADMAOABhADQAOAA0ADQAZQBiADEAYgA3ADcAYwBlAGQAZgA4ADMAYgBjAGYAMQA5
AGMAZQAAADAACAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAA
KAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMgAzAGYAMgAyADkAMwA4AGEANAA4
ADQANABlAGIAMQBiADcANwBjAGUAZABmADgAMwBiAGMAZgAxADkAYwBlAC4AZABsAGwAAABIABIA
AQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAg
ADIAMAAyADEAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgA
KAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwAyADMAZgAyADIAOQAz
ADgAYQA0ADgANAA0AGUAYgAxAGIANwA3AGMAZQBkAGYAOAAzAGIAYwBmADEAOQBjAGUALgBkAGwA
bAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMgAzAGYAMgAyADkAMwA4
AGEANAA4ADQANABlAGIAMQBiADcANwBjAGUAZABmADgAMwBiAGMAZgAxADkAYwBlAAAANAAIAAEA
UAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBz
AGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAACENgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Import Completed Data"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:DelayValidation="True"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{47bbf3f3-b65e-4a7c-a2f8-2e74ac20ba7e}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Import Completed Data"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Import Completed Data\Excel Source"
              componentClassID="Microsoft.ExcelSource"
              contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Excel Source"
              name="Excel Source"
              usesDispositions="true"
              version="1">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">Completed$</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">0</property>
                <property
                  dataType="System.String"
                  description="The mapping from parameters in the SQL command to variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Import Completed Data\Excel Source.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[Excel Connection Manager]"
                  connectionManagerRefId="Package.ConnectionManagers[Excel Connection Manager]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output]"
                  name="Excel Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Firm Instructed]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Firm Instructed]"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Firm Instructed]"
                      name="Firm Instructed"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[UPRN]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[UPRN]"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[UPRN]"
                      name="UPRN"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Region]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Region]"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Region]"
                      name="Region"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[LGSR Expiry]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[LGSR Expiry]"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[LGSR Expiry]"
                      name="LGSR Expiry"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address]"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address]"
                      name="Tenant's Full Address"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 2]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address 2]"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 2]"
                      name="Tenant's Full Address 2"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 3]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address 3]"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 3]"
                      name="Tenant's Full Address 3"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      name="Tenant's Postcode (added so we can show the instructions on a ma"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Name _(use separate line for joint tenant)__]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Name _(use separate line for joint tenant)__]"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Name _(use separate line for joint tenant)__]"
                      name="Tenant's Name _(use separate line for joint tenant)__"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Date LBA issued]"
                      dataType="date"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Date LBA issued]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Date LBA issued]"
                      name="Date LBA issued"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[LBA expiry date]"
                      dataType="date"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[LBA expiry date]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[LBA expiry date]"
                      name="LBA expiry date"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Is this a joint tenancy? (Y/N)]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Is this a joint tenancy? (Y/N)]"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Is this a joint tenancy? (Y/N)]"
                      name="Is this a joint tenancy? (Y/N)"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Status (Ongoing/Completed)]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Status (Ongoing/Completed)]"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Status (Ongoing/Completed)]"
                      name="Status (Ongoing/Completed)"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Date billed]"
                      dataType="date"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Date billed]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Date billed]"
                      name="Date billed"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Fees Billed exc# VAT]"
                      dataType="cy"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Fees Billed exc# VAT]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Fees Billed exc# VAT]"
                      name="Fees Billed exc# VAT"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Firm Instructed]"
                      dataType="wstr"
                      length="255"
                      name="Firm Instructed" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[UPRN]"
                      dataType="wstr"
                      length="255"
                      name="UPRN" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Region]"
                      dataType="wstr"
                      length="255"
                      name="Region" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[LGSR Expiry]"
                      dataType="wstr"
                      length="255"
                      name="LGSR Expiry" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address 2]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address 2" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address 3]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address 3" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Postcode (added so we can show the instructions on a ma" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Name _(use separate line for joint tenant)__]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Name _(use separate line for joint tenant)__" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Date LBA issued]"
                      dataType="date"
                      name="Date LBA issued" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[LBA expiry date]"
                      dataType="date"
                      name="LBA expiry date" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Is this a joint tenancy? (Y/N)]"
                      dataType="wstr"
                      length="255"
                      name="Is this a joint tenancy? (Y/N)" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Status (Ongoing/Completed)]"
                      dataType="wstr"
                      length="255"
                      name="Status (Ongoing/Completed)" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Date billed]"
                      dataType="date"
                      name="Date billed" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Fees Billed exc# VAT]"
                      dataType="cy"
                      name="Fees Billed exc# VAT" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output]"
                  isErrorOut="true"
                  name="Excel Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Firm Instructed]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Firm Instructed]"
                      name="Firm Instructed" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[UPRN]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[UPRN]"
                      name="UPRN" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Region]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Region]"
                      name="Region" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[LGSR Expiry]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[LGSR Expiry]"
                      name="LGSR Expiry" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address]"
                      name="Tenant's Full Address" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address 2]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address 2]"
                      name="Tenant's Full Address 2" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address 3]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address 3]"
                      name="Tenant's Full Address 3" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      name="Tenant's Postcode (added so we can show the instructions on a ma" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Name _(use separate line for joint tenant)__]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Name _(use separate line for joint tenant)__]"
                      name="Tenant's Name _(use separate line for joint tenant)__" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Date LBA issued]"
                      dataType="date"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Date LBA issued]"
                      name="Date LBA issued" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[LBA expiry date]"
                      dataType="date"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[LBA expiry date]"
                      name="LBA expiry date" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Is this a joint tenancy? (Y/N)]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Is this a joint tenancy? (Y/N)]"
                      name="Is this a joint tenancy? (Y/N)" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Status (Ongoing/Completed)]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Status (Ongoing/Completed)]"
                      name="Status (Ongoing/Completed)" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Date billed]"
                      dataType="date"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Date billed]"
                      name="Date billed" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Fees Billed exc# VAT]"
                      dataType="cy"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[Fees Billed exc# VAT]"
                      name="Fees Billed exc# VAT" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Import Completed Data\Import Data"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Import Data"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[RiversideGasComplianceCompleted]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Import Completed Data\Import Data.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[svr-liv-dw-01.Visualisation]"
                  connectionManagerRefId="Package.ConnectionManagers[svr-liv-dw-01.Visualisation]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Firm Instructed]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Firm Instructed"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Firm Instructed]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Firm Instructed]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[UPRN]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="UPRN"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[UPRN]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[UPRN]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Region]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Region"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Region]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Region]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[LGSR Expiry]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="LGSR Expiry"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[LGSR Expiry]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[LGSR Expiry]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Tenant's Full Address]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Tenant's Full Address"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Tenant's Full Address 2]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Tenant's Full Address 2"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address 2]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 2]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Tenant's Full Address 3]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Tenant's Full Address 3"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address 3]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 3]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Tenant's Postcode (added so we can show the instructions on a ma"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Postcode (added so we can show the instructions on a ma]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Tenant's Name _(use separate line for joint tenant)__]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Tenant's Name _(use separate line for joint tenant)__"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Name _(use separate line for joint tenant)__]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Name _(use separate line for joint tenant)__]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Date LBA issued]"
                      cachedDataType="date"
                      cachedName="Date LBA issued"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Date LBA issued]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Date LBA issued]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[LBA expiry date]"
                      cachedDataType="date"
                      cachedName="LBA expiry date"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[LBA expiry date]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[LBA expiry date]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Is this a joint tenancy? (Y/N)]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Is this a joint tenancy? (Y/N)"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Is this a joint tenancy? (Y/N)]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Is this a joint tenancy? (Y/N)]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Date billed]"
                      cachedDataType="date"
                      cachedName="Date billed"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Date billed]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Date billed]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Fees Billed exc# VAT]"
                      cachedDataType="cy"
                      cachedName="Fees Billed exc# VAT"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Fees Billed exc# VAT]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Fees Billed exc# VAT]" />
                    <inputColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].Columns[Status (Ongoing/Completed)]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Status (Ongoing/Completed)"
                      externalMetadataColumnId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Status (Ongoing/Completed)]"
                      lineageId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output].Columns[Status (Ongoing/Completed)]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Firm Instructed]"
                      dataType="wstr"
                      length="255"
                      name="Firm Instructed" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[UPRN]"
                      dataType="wstr"
                      length="255"
                      name="UPRN" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Region]"
                      dataType="wstr"
                      length="255"
                      name="Region" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[LGSR Expiry]"
                      dataType="wstr"
                      length="255"
                      name="LGSR Expiry" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address 2]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address 2" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address 3]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address 3" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Postcode (added so we can show the instructions on a ma" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Name _(use separate line for joint tenant)__]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Name _(use separate line for joint tenant)__" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Date LBA issued]"
                      dataType="dbTimeStamp"
                      name="Date LBA issued" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[LBA expiry date]"
                      dataType="dbTimeStamp"
                      name="LBA expiry date" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Is this a joint tenancy? (Y/N)]"
                      dataType="wstr"
                      length="255"
                      name="Is this a joint tenancy? (Y/N)" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Status (Ongoing/Completed)]"
                      dataType="wstr"
                      length="255"
                      name="Status (Ongoing/Completed)" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Date billed]"
                      dataType="dbTimeStamp"
                      name="Date billed" />
                    <externalMetadataColumn
                      refId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input].ExternalColumns[Fees Billed exc# VAT]"
                      dataType="cy"
                      name="Fees Billed exc# VAT" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Import Completed Data\Import Data.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import Completed Data\Import Data.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Import Completed Data\Import Data.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Import Completed Data\Import Data.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Import Completed Data\Import Data.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Import Completed Data.Paths[Excel Source Output]"
              endId="Package\Import Completed Data\Import Data.Inputs[OLE DB Destination Input]"
              name="Excel Source Output"
              startId="Package\Import Completed Data\Excel Source.Outputs[Excel Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Import Live Data"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:DelayValidation="True"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{5C4759E9-5326-47A0-8D2C-7CC77A6D574F}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Import Live Data"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Import Live Data\Excel Source"
              componentClassID="Microsoft.ExcelSource"
              contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Excel Source"
              name="Excel Source"
              usesDispositions="true"
              version="1">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">Live$</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">0</property>
                <property
                  dataType="System.String"
                  description="The mapping from parameters in the SQL command to variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Import Live Data\Excel Source.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[Excel Connection Manager]"
                  connectionManagerRefId="Package.ConnectionManagers[Excel Connection Manager]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output]"
                  name="Excel Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Firm Instructed]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Firm Instructed]"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Firm Instructed]"
                      name="Firm Instructed"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[UPRN]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[UPRN]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[UPRN]"
                      name="UPRN"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Region]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Region]"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Region]"
                      name="Region"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[LGSR Expiry]"
                      dataType="date"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[LGSR Expiry]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[LGSR Expiry]"
                      name="LGSR Expiry"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address]"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address]"
                      name="Tenant's Full Address"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 2]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address 2]"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 2]"
                      name="Tenant's Full Address 2"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 3]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address 3]"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 3]"
                      name="Tenant's Full Address 3"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      name="Tenant's Postcode (added so we can show the instructions on a ma"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Name _(use separate line for joint tenant)__]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Name _(use separate line for joint tenant)__]"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Name _(use separate line for joint tenant)__]"
                      name="Tenant's Name _(use separate line for joint tenant)__"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Date LBA issued]"
                      dataType="date"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Date LBA issued]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Date LBA issued]"
                      name="Date LBA issued"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[LBA expiry date]"
                      dataType="date"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[LBA expiry date]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[LBA expiry date]"
                      name="LBA expiry date"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Is this a joint tenancy? (Y/N)]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Is this a joint tenancy? (Y/N)]"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Is this a joint tenancy? (Y/N)]"
                      name="Is this a joint tenancy? (Y/N)"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Status (Live/Completed)]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Status (Live/Completed)]"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Status (Live/Completed)]"
                      name="Status (Live/Completed)"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Date billed]"
                      dataType="date"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Date billed]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Date billed]"
                      name="Date billed"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Fees Billed exc# VAT]"
                      dataType="cy"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Fees Billed exc# VAT]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Fees Billed exc# VAT]"
                      name="Fees Billed exc# VAT"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Firm Instructed]"
                      dataType="wstr"
                      length="255"
                      name="Firm Instructed" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[UPRN]"
                      dataType="r8"
                      name="UPRN" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Region]"
                      dataType="wstr"
                      length="255"
                      name="Region" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[LGSR Expiry]"
                      dataType="date"
                      name="LGSR Expiry" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address 2]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address 2" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Full Address 3]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address 3" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Postcode (added so we can show the instructions on a ma" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Tenant's Name _(use separate line for joint tenant)__]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Name _(use separate line for joint tenant)__" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Date LBA issued]"
                      dataType="date"
                      name="Date LBA issued" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[LBA expiry date]"
                      dataType="date"
                      name="LBA expiry date" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Is this a joint tenancy? (Y/N)]"
                      dataType="wstr"
                      length="255"
                      name="Is this a joint tenancy? (Y/N)" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Status (Live/Completed)]"
                      dataType="wstr"
                      length="255"
                      name="Status (Live/Completed)" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Date billed]"
                      dataType="date"
                      name="Date billed" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].ExternalColumns[Fees Billed exc# VAT]"
                      dataType="cy"
                      name="Fees Billed exc# VAT" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output]"
                  isErrorOut="true"
                  name="Excel Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Firm Instructed]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Firm Instructed]"
                      name="Firm Instructed" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[UPRN]"
                      dataType="r8"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[UPRN]"
                      name="UPRN" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Region]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Region]"
                      name="Region" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[LGSR Expiry]"
                      dataType="date"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[LGSR Expiry]"
                      name="LGSR Expiry" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address]"
                      name="Tenant's Full Address" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address 2]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address 2]"
                      name="Tenant's Full Address 2" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address 3]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Full Address 3]"
                      name="Tenant's Full Address 3" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      name="Tenant's Postcode (added so we can show the instructions on a ma" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Name _(use separate line for joint tenant)__]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Tenant's Name _(use separate line for joint tenant)__]"
                      name="Tenant's Name _(use separate line for joint tenant)__" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Date LBA issued]"
                      dataType="date"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Date LBA issued]"
                      name="Date LBA issued" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[LBA expiry date]"
                      dataType="date"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[LBA expiry date]"
                      name="LBA expiry date" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Is this a joint tenancy? (Y/N)]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Is this a joint tenancy? (Y/N)]"
                      name="Is this a joint tenancy? (Y/N)" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Status (Live/Completed)]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Status (Live/Completed)]"
                      name="Status (Live/Completed)" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Date billed]"
                      dataType="date"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Date billed]"
                      name="Date billed" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Fees Billed exc# VAT]"
                      dataType="cy"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[Fees Billed exc# VAT]"
                      name="Fees Billed exc# VAT" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Import Live Data\Imported data"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Imported data"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[RiversideGasComplianceLive]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Import Live Data\Imported data.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[svr-liv-dw-01.Visualisation]"
                  connectionManagerRefId="Package.ConnectionManagers[svr-liv-dw-01.Visualisation]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Firm Instructed]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Firm Instructed"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Firm Instructed]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Firm Instructed]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[UPRN]"
                      cachedDataType="r8"
                      cachedName="UPRN"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[UPRN]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[UPRN]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Region]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Region"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Region]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Region]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[LGSR Expiry]"
                      cachedDataType="date"
                      cachedName="LGSR Expiry"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[LGSR Expiry]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[LGSR Expiry]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Tenant's Full Address]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Tenant's Full Address"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Tenant's Full Address 2]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Tenant's Full Address 2"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address 2]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 2]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Tenant's Full Address 3]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Tenant's Full Address 3"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address 3]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Full Address 3]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Tenant's Postcode (added so we can show the instructions on a ma"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Postcode (added so we can show the instructions on a ma]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Tenant's Name _(use separate line for joint tenant)__]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Tenant's Name _(use separate line for joint tenant)__"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Name _(use separate line for joint tenant)__]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Tenant's Name _(use separate line for joint tenant)__]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Date LBA issued]"
                      cachedDataType="date"
                      cachedName="Date LBA issued"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Date LBA issued]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Date LBA issued]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[LBA expiry date]"
                      cachedDataType="date"
                      cachedName="LBA expiry date"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[LBA expiry date]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[LBA expiry date]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Is this a joint tenancy? (Y/N)]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Is this a joint tenancy? (Y/N)"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Is this a joint tenancy? (Y/N)]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Is this a joint tenancy? (Y/N)]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Status (Live/Completed)]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="Status (Live/Completed)"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Status (Live/Completed)]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Status (Live/Completed)]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Date billed]"
                      cachedDataType="date"
                      cachedName="Date billed"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Date billed]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Date billed]" />
                    <inputColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].Columns[Fees Billed exc# VAT]"
                      cachedDataType="cy"
                      cachedName="Fees Billed exc# VAT"
                      externalMetadataColumnId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Fees Billed exc# VAT]"
                      lineageId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output].Columns[Fees Billed exc# VAT]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Firm Instructed]"
                      dataType="wstr"
                      length="255"
                      name="Firm Instructed" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[UPRN]"
                      dataType="r8"
                      name="UPRN" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Region]"
                      dataType="wstr"
                      length="255"
                      name="Region" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[LGSR Expiry]"
                      dataType="dbTimeStamp"
                      name="LGSR Expiry" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address 2]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address 2" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Full Address 3]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Full Address 3" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Postcode (added so we can show the instructions on a ma]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Postcode (added so we can show the instructions on a ma" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Tenant's Name _(use separate line for joint tenant)__]"
                      dataType="wstr"
                      length="255"
                      name="Tenant's Name _(use separate line for joint tenant)__" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Date LBA issued]"
                      dataType="dbTimeStamp"
                      name="Date LBA issued" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[LBA expiry date]"
                      dataType="dbTimeStamp"
                      name="LBA expiry date" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Is this a joint tenancy? (Y/N)]"
                      dataType="wstr"
                      length="255"
                      name="Is this a joint tenancy? (Y/N)" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Status (Live/Completed)]"
                      dataType="wstr"
                      length="255"
                      name="Status (Live/Completed)" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Date billed]"
                      dataType="dbTimeStamp"
                      name="Date billed" />
                    <externalMetadataColumn
                      refId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input].ExternalColumns[Fees Billed exc# VAT]"
                      dataType="cy"
                      name="Fees Billed exc# VAT" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Import Live Data\Imported data.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import Live Data\Imported data.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Import Live Data\Imported data.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Import Live Data\Imported data.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Import Live Data\Imported data.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Import Live Data.Paths[Excel Source Output]"
              endId="Package\Import Live Data\Imported data.Inputs[OLE DB Destination Input]"
              name="Excel Source Output"
              startId="Package\Import Live Data\Excel Source.Outputs[Excel Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Remove Password Protect"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{2A6269C0-D7F6-4979-9E6C-948962ED39C5}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Remove Password Protect"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_293ba5e7ae5d4b22887990fa4c78835e"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="VisualBasic"
          ReadOnlyVariables="User::FilePath,User::Password">
          <ProjectItem
            Name="My Project\AssemblyInfo.vb"
            Encoding="UTF8"><![CDATA[Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices

' General Information about an assembly is controlled through the following 
' set of attributes. Change these attribute values to modify the information
' associated with an assembly.

' Review the values of the assembly attributes

<Assembly: AssemblyTitle("ST_293ba5e7ae5d4b22887990fa4c78835e")> 
<Assembly: AssemblyDescription("")> 
<Assembly: AssemblyCompany("")> 
<Assembly: AssemblyProduct("ST_293ba5e7ae5d4b22887990fa4c78835e")> 
<Assembly: AssemblyCopyright("Copyright @  2021")> 
<Assembly: AssemblyTrademark("")> 
<Assembly: CLSCompliant(True)> 

<Assembly: ComVisible(False)> 

'The following GUID is for the ID of the typelib if this project is exposed to COM
<Assembly: Guid("2e9e8a78-447f-4ff2-827b-0d65a127a2e7")> 

' Version information for an assembly consists of the following four values:
'
'      Major Version
'      Minor Version 
'      Build Number
'      Revision
'
' You can specify all the values or you can default the Build and Revision Numbers 
' by using the '*' as shown below:
' <Assembly: AssemblyVersion("1.0.*")>

<Assembly: AssemblyVersion("1.0.0.0")> 
<Assembly: AssemblyFileVersion("1.0.0.0")> ]]></ProjectItem>
          <ProjectItem
            Name="ST_293ba5e7ae5d4b22887990fa4c78835e.vbproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{F184B08F-C81C-45F6-A57F-5ABD9991F28F}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D063493C-D263-4A04-A75E-C164DF346F0A}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>My Project</AppDesignerFolder>
    <RootNamespace>ST_293ba5e7ae5d4b22887990fa4c78835e</RootNamespace>
    <AssemblyName>ST_293ba5e7ae5d4b22887990fa4c78835e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineDebug>true</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineDebug>false</DefineDebug>
    <DefineTrace>true</DefineTrace>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <Import Include="Microsoft.VisualBasic" />
    <Import Include="System" />
    <Import Include="System.Collections" />
    <Import Include="System.Data" />
    <Import Include="System.Diagnostics" />
    <Import Include="System.Windows.Forms" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="My Project\" />
    <Compile Include="My Project\AssemblyInfo.vb">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="My Project\Resources.resx">
      <Generator>VbMyResourcesResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.vb</LastGenOutput>
      <CustomToolNamespace>My.Resources</CustomToolNamespace>
    </EmbeddedResource>
    <Compile Include="My Project\Resources.Designer.vb">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Resources.resx</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <None Include="My Project\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.vb</LastGenOutput>
    </None>
    <Compile Include="My Project\Settings.Designer.vb">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="ScriptMain.vb">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <COMReference Include="Microsoft.Office.Core">
      <Guid>{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}</Guid>
      <VersionMajor>2</VersionMajor>
      <VersionMinor>8</VersionMinor>
      <Lcid>0</Lcid>
      <WrapperTool>primary</WrapperTool>
      <Isolated>False</Isolated>
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </COMReference>
    <COMReference Include="Microsoft.Office.Interop.Excel">
      <Guid>{00020813-0000-0000-C000-000000000046}</Guid>
      <VersionMajor>1</VersionMajor>
      <VersionMinor>9</VersionMinor>
      <Lcid>0</Lcid>
      <WrapperTool>primary</WrapperTool>
      <Isolated>False</Isolated>
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </COMReference>
    <COMReference Include="VBIDE">
      <Guid>{0002E157-0000-0000-C000-000000000046}</Guid>
      <VersionMajor>5</VersionMajor>
      <VersionMinor>3</VersionMinor>
      <Lcid>0</Lcid>
      <WrapperTool>primary</WrapperTool>
      <Isolated>False</Isolated>
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </COMReference>
  </ItemGroup>
  <!-- Include the build rules for a VB project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.VisualBasic.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="vb" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="My Project\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)" GeneratedClassNamespace="$safeprojectname" GeneratedClassName="MySettings">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="My Project\Settings.Designer.vb"
            Encoding="UTF8"><![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



Partial Friend NotInheritable Class MySettings
    Inherits System.Configuration.ApplicationSettingsBase

    Private Shared m_Value As MySettings

    Private Shared m_SyncObject As Object = New Object

    <System.Diagnostics.DebuggerNonUserCode()> _
    Public Shared ReadOnly Property Value() As MySettings
        Get
            If (MySettings.m_Value Is Nothing) Then
                System.Threading.Monitor.Enter(MySettings.m_SyncObject)
                If (MySettings.m_Value Is Nothing) Then
                    Try
                        MySettings.m_Value = New MySettings
                    Finally
                        System.Threading.Monitor.Exit(MySettings.m_SyncObject)
                    End Try
                End If
            End If
            Return MySettings.m_Value
        End Get
    End Property
End Class]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_293ba5e7ae5d4b22887990fa4c78835e</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_293ba5e7ae5d4b22887990fa4c78835e</msb:DisplayName>
    <msb:ProjectId>{391C6503-5941-4014-B97D-B5A1EAB7D292}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_293ba5e7ae5d4b22887990fa4c78835e.vbproj" />
    <msb:File Include="ScriptMain.vb" />
    <msb:File Include="My Project\Resources.resx" />
    <msb:File Include="My Project\AssemblyInfo.vb" />
    <msb:File Include="My Project\Resources.Designer.vb" />
    <msb:File Include="My Project\Settings.settings" />
    <msb:File Include="My Project\Settings.Designer.vb" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.vb"
            Encoding="UTF8"><![CDATA[#Region "Help:  Introduction to the script task"
'The Script Task allows you to perform virtually any operation that can be accomplished in
'a .Net application within the context of an Integration Services control flow. 

'Expand the other regions which have "Help" prefixes for examples of specific ways to use
'Integration Services features within this script task.
#End Region


#Region "Imports"
Imports System
Imports System.Data
Imports System.Math
Imports System.Runtime.InteropServices
Imports Microsoft.SqlServer.Dts.Runtime
Imports Microsoft.Office.Interop.Excel
Imports Microsoft.Office.Interop


#End Region

'ScriptMain is the entry point class of the script.  Do not change the name, attributes,
'or parent of this class.
<Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute()> _
<System.CLSCompliantAttribute(False)> _
Partial Public Class ScriptMain
    Inherits Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase

#Region "Help:  Using Integration Services variables and parameters in a script"
    'To use a variable in this script, first ensure that the variable has been added to 
    'either the list contained in the ReadOnlyVariables property or the list contained in 
    'the ReadWriteVariables property of this script task, according to whether or not your
    'code needs to write to the variable.  To add the variable, save this script, close this instance of
    'Visual Studio, and update the ReadOnlyVariables and 
    'ReadWriteVariables properties in the Script Transformation Editor window.
    'To use a parameter in this script, follow the same steps. Parameters are always read-only.

    'Example of reading from a variable:
    ' startTime = Dts.Variables("System::StartTime").Value

    'Example of writing to a variable:
    ' Dts.Variables("User::myStringVariable").Value = "new value"

    'Example of reading from a package parameter:
    ' batchId = Dts.Variables("$Package::batchId").Value

    'Example of reading from a project parameter:
    ' batchId = Dts.Variables("$Project::batchId").Value

    'Example of reading from a sensitive project parameter:
    ' batchId = Dts.Variables("$Project::batchId").GetSensitiveValue()
#End Region

#Region "Help:  Firing Integration Services events from a script"
    'This script task can fire events for logging purposes.

    'Example of firing an error event:
    ' Dts.Events.FireError(18, "Process Values", "Bad value", "", 0)

    'Example of firing an information event:
    ' Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, fireAgain)

    'Example of firing a warning event:
    ' Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0)
#End Region

#Region "Help:  Using Integration Services connection managers in a script"
    'Some types of connection managers can be used in this script task.  See the topic 
    '"Working with Connection Managers Programatically" for details.

    'Example of using an ADO.Net connection manager:
    ' Dim rawConnection As Object = Dts.Connections("Sales DB").AcquireConnection(Dts.Transaction)
    ' Dim myADONETConnection As SqlConnection = CType(rawConnection, SqlConnection)
    ' <Use the connection in some code here, then release the connection>
    ' Dts.Connections("Sales DB").ReleaseConnection(rawConnection)

    'Example of using a File connection manager
    ' Dim rawConnection As Object = Dts.Connections("Prices.zip").AcquireConnection(Dts.Transaction)
    ' Dim filePath As String = CType(rawConnection, String)
    ' <Use the connection in some code here, then release the connection>
    ' Dts.Connections("Prices.zip").ReleaseConnection(rawConnection)
#End Region

    'This method is called when this script task executes in the control flow.
    'Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
    'To open Help, press F1.

    Public Sub Main()
        '
        Try
            Dim xlApp As Microsoft.Office.Interop.Excel.Application = New Microsoft.Office.Interop.Excel.Application()
            Dim Password As String = Dts.Variables("Password").Value.ToString()
            'Password = "Riversidegas"

            Dim filename As String = Dts.Variables("FilePath").Value.ToString()
            'filename = "\\svr-liv-fs-06\Restricted\LTA\Litigation\Property Litigation\Riverside Gas\MASTER REFERRAL SPREADSHEET - Copy.xlsx"
            xlApp.DisplayAlerts = False
            xlApp.Visible = False
            Dim wbk As Excel.Workbook = xlApp.Workbooks.Open(filename, 0, False, 5, Password, "", False, Excel.XlPlatform.xlWindows, "", True, False, 0, True, False, False)
            'wbk.Unprotect("")
            wbk.Password = ""
            wbk.Save()
            xlApp.Quit()
            Marshal.ReleaseComObject(wbk)
            Marshal.ReleaseComObject(xlApp)
        Catch ex As Exception
            MessageBox.Show(ex.Message.ToString)
            '
            Dts.TaskResult = ScriptResults.Success
        End Try
    End Sub

#Region "ScriptResults declaration"
    'This enum provides a convenient shorthand within the scope of this class for setting the
    'result of the script.

    'This code was generated automatically.
    Enum ScriptResults
        Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success
        Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
    End Enum

#End Region

End Class]]></ProjectItem>
          <ProjectItem
            Name="My Project\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="My Project\Resources.Designer.vb"
            Encoding="UTF8"><![CDATA['------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On


Namespace My.Resources
    
    '''<summary>
    '''   A strongly-typed resource class, for looking up localized strings, etc.
    '''</summary>
    'This class was auto-generated by the Strongly Typed Resource Builder
    'class via a tool like ResGen or Visual Studio.NET.
    'To add or remove a member, edit your .ResX file then rerun ResGen
    'with the /str option, or rebuild your VS project.
    Class MyResources
        
        Private Shared _resMgr As System.Resources.ResourceManager
        
        Private Shared _resCulture As System.Globalization.CultureInfo
        
        Friend Sub New()
            MyBase.New
        End Sub
        
        '''<summary>
        '''   Returns the cached ResourceManager instance used by this class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared ReadOnly Property ResourceManager() As System.Resources.ResourceManager
            Get
                If (_resMgr Is Nothing) Then
                    Dim temp As System.Resources.ResourceManager = New System.Resources.ResourceManager("My.Resources.MyResources", GetType(MyResources).Assembly)
                    _resMgr = temp
                End If
                Return _resMgr
            End Get
        End Property
        
        '''<summary>
        '''   Overrides the current thread's CurrentUICulture property for all
        '''   resource lookups using this strongly typed resource class.
        '''</summary>
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Public Shared Property Culture() As System.Globalization.CultureInfo
            Get
                Return _resCulture
            End Get
            Set
                _resCulture = value
            End Set
        End Property
    End Class
End Namespace]]></ProjectItem>
          <BinaryItem
            Name="ST_293ba5e7ae5d4b22887990fa4c78835e.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAFAY+GAAAAAAAAAAAOAAIiALAVAAACgAAAAIAAAAAAAAhkYA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACgAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAADRGAABPAAAAAGAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAjCYAAAAgAAAAKAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAYAAAAAYAAAAqAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAMAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABo
RgAAAAAAAEgAAAACAAUATCMAADAiAAABAAAAAAAAAHxFAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKCEAAAoqHgIoIgAACiqmcyMAAAqAAQAABHMkAAAKgAIA
AARzJQAACoADAAAEcyYAAAqABAAABCoufgEAAARvJwAACioufgIAAARvKAAACioufgMAAARvKQAA
CioufgQAAARvKgAACioeAigrAAAKKq5+BQAABC0ecgEAAHDQBQAAAigsAAAKby0AAApzLgAACoAF
AAAEfgUAAAQqGn4GAAAEKh4CgAYAAAQqQnMrAAAKKC8AAAqACAAABCoeAigwAAAKKgAAGzABAD8A
AAAAAAAAfgcAAAQtMn4IAAAEKC8AAAooMQAACn4HAAAELRxzDQAABoAHAAAE3hB+CAAABCgvAAAK
KDIAAArcfgcAAAQqAAEQAAACAB0ADCkAEAAAAAAeAigzAAAKKhswEQATAQAAAQAAEXIzAABwczQA
AAooNQAACig2AAAKdAoAAAICKDcAAApvOAAACnJ9AABwbzkAAApvOgAACm87AAAKCgIoNwAACm84
AAAKco8AAHBvOQAACm86AAAKbzsAAAoLJRZvGwAABiUWbyAAAAYlbxYAAAYHFow6AAABFow7AAAB
G4w6AAABBnKhAABwFow7AAABGIwPAAACcqEAAHAXjDsAAAEWjDsAAAEWjDoAAAEXjDsAAAEWjDsA
AAEWjDsAAAFvFAAABgwIcqEAAHBvJQAABghvIgAABiVvHQAABggoPAAACiYoPAAACibeKyUoPQAA
Cg0Jbz4AAApvPwAACihAAAAKJgIoNwAAChZvQQAACihCAAAK3gAqAAEQAAAAAAAA5+cAKyUAAAE2
AgMoLwAACihDAAAKKh4CKEQAAAoqLtASAAACKCwAAAoqHgIoOwAACioAABMwAQAUAAAAAgAAEQKM
BQAAGy0IKAEAACsKKwICCgYqIgP+FQUAABsqAAAAEzACACgAAAADAAARAntGAAAKb0cAAAoKBowI
AAAbLRIoAgAAKwoCe0YAAAoGb0gAAAoGKkoCKCsAAAoCc0kAAAp9RgAACioAQlNKQgEAAQAAAAAA
DAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAQA0AACN+AACsDQAAkAwAACNTdHJpbmdzAAAAADwaAACk
AAAAI1VTAOAaAAAQAAAAI0dVSUQAAADwGgAAQAcAACNCbG9iAAAAAAAAAAIAAAFXP6IJCQ8AAAD6
ATMAFgAAAQAAAD8AAAAUAAAAEAAAAC4AAAAcAAAABQAAAEkAAAAFAAAAcgAAABYAAAADAAAABwAA
AA4AAAASAAAACAAAAAEAAAAGAAAAAQAAAAMAAAADAAAAAgAAAAAATgcBAAAAAAAGADQFEQoGAOoF
EQoGAK0DUgkPALcKAAAGAO4DGggGAOgEGggGANEFGggGAGUFGggGAH4FGggGAEwEGggGAJkFfwcG
ANoDywkGADsDywkGAJgEGggGAGcESQYKAHkDtggKAPsCOAcKAMEDOAcOANMCoQkOAAAJZQkGAIAE
UgkOAAUE6gkOAB0EMAEGALoLfwcOANIIoQkOAM0EMAEGAIYCfwcOAEEA3QYKAEkDowcGAKYIMQoG
ADYIBQgKAOMC8AcGAJADUgkSAK8FpgYSALcCpgYGAHgGfwcGACwIfwcGAJEHfwcGACADEQoGADUE
ywkGABwFywkGAF4DywkGAFQFywkGAAUFGggGAAkCFQsGABADywkGALUEywkGADYCfwcGAH4MGggG
ACgLEQoGAEoJOAYGAGwBfwcGANUGywkGADMJfwcSACYHpgYWAMoKYwIWAAACYwIGAGsAfwcGAJYH
fwcOABsB6gkGAGUGfwcaAEEMAAsaAOILAAsAAAAApQAAAAAAAQABAAAAAADiB0wMTQABAAEAAAAA
AP4ITAxRAAEAAgAAARAAwQtMDGEAAQADAAAAAABzCkIKYQAFAAgAAAEQANQKnAGBAAcADAABAAAA
wAecAY0ACQAPAKEQAABkCwcHAAAJABEAoRAAABMMBwcAAAkAEQChEAAA5AcHBwAACQARAKEQAAB+
BgcHAAAJABEAoRAAAFULBwcAAAkAEQChEAAA/gsHBwAACQARAKEQAADvCgcHAAAJABEAAQEAAIYH
BweZAAkAFQChEAAA1QcHBwAADQAVAKEQAAB9BgcHAAANACEABQEAAJMJAABhAA0AJgAFAQAAUAAA
AGEADQAtAAIBAABHCwAAmQAOAC8AMQBrCEYBMQBCCE4BMQBWCFYBMQCECF4BEQAJCWYBEQCrAmoB
EQAIBm4BEQCjC3IBBgYTAXUBVoBsBngBVoDDAHgBVoCSC3gBIQAjDPQABgYTAXUBVoA3C3wBVoCL
AnwBUCAAAAAABhg9CQYAAQBYIAAAAAAGGD0JBgABAGAgAAAAABEYQwnIAAEAiiAAAAAAEwjxCIAB
AQCWIAAAAAATCNIHhQEBAKIgAAAAABMIzgiKAQEAriAAAAAAEwiDCY8BAQC6IAAAAAADGD0JBgAB
AMIgAAAAABYIogiUAQEA7iAAAAAAFgiTApkBAQD1IAAAAAAWCJ8CngEBAP0gAAAAABEYQwnIAAIA
DiEAAAAABhg9CQYAAgAYIQAAAAAWCBAGpAECAHQhAAAAAAYYPQkGAAIAfCEAAAAABgDGBwYAAgAA
AAAAAwAGGAEABgACAAAAAAADEMYN1QupAQIAAAAAAAMABhg1AAYABAAAAAAAAxDGBZ4HrwEEAAAA
AAADAAYYcQAGABQAAAAAAAMQxg3rCsMBFAAAAAAAAwAGGA4ABgAVAAAAAAADEMYN1QuxABUAAAAA
AAMABhiLAAYAFgAAAAAAAxDGDW4LyAEWAAAAAAADEMYNgAsVABYAAAAAAAMABhiXAAYAFwAAAAAA
AxDGBcsLBgAXAAAAAAADAAYYKAAGABcAAAAAAAMQxg0eAsgBFwAAAAAAAxDGDSoCFQAXAAAAAAAD
AAYYfgAGABgAAAAAAAMQxgUzBgYAGAAAAAAAAwAGGBsABgAYAAAAAAADEMYNcQGxABgAAAAAAAMQ
xg1+ARAAGQCsIgAAAADGAvkKzAAaALoiAAAAAMYC6AHRABsAwiIAAAAAgwCDAswBGwDOIgAAAADG
AmMGsQAbANgiAAAAABEAAAHRARsA+CIAAAAAAQDsANkBHAC6IAAAAAAGGD0JBgAdAAQjAAAAAAMI
zwFdAB0AOCMAAAAABhg9CQYAHQAAAAEALQYAIAAAAAABIAEAOwwAIAAAAAABIAEAWgIRIAIA3woR
IAMAhwwRIAQAnAsRIAUAkwERIAYAiwERIAcAUgERIAgAywcRIAkA1wgRIAoAFQIRIAsAcwwRIAwA
5wgRIA0ALQwRIA4AzwYRIA8ARgEAIAAAAAAAIAAAAAABAAEAvwABAAEAvwAAIAAAAAABIAEAvwAA
AAEAQAgAAAEA3wEAAAEA3wEKAEAACgAkAAsARAALADQADgC1AAkAPQkBABEAPQkGABkAPQkKACkA
PQkQADEAPQkQADkAPQkQAEEAPQkQAEkAPQkQAFEAPQkQAFkAPQkVAGEAPQkVAGkAPQkQAHEAPQkQ
AHkAPQkQAIEAPQkaAJEAPQkgAKkAPQkGALEAPQkGALkAPQkGANEAPQkmAOkAPQkQAAkBPQkGABEB
PQkGADkBPQkGAEEBPQkuAEkBPQkGAFEBPQkzAEkBPQkaAFkBPQk7AGEBPQkQAHEBPQkBAHkBPQkB
AJkAPQkGAKEAPQkGAAwAPQkGABQAPQkGABwAPQkGACQAPQkGAAwAzwFdABQAzwFdABwAzwFdACQA
zwFdAMEAPQkGANkASAJiANkAegxqAPEAPQlwAJEBJAZ4AAEBPQkGAJkB4Qh9AJkB0At9ABkBPQkG
AKEBPQkQAKkBrgCMALEBwAGUABkBPwuaALkBxgqgAMEBdgemAMkBEAatAMEAYwaxAKkBsAu1AOEB
Iwm6ACkB9AGxAOkBYwaxAPEBNgzBALkB7wsBAOEBEQnIAMEA+QrMAMEA6AHRALEBwAHdADQAIwz0
ADwAEAZdADwAGgYLATwAPQkGAAgAKAAsAQgALAAxAQgAMAA2AQgAPAA7AQgAQAAsASkAqwD5Bi4A
CwAcAi4AEwAlAi4AGwBEAi4AIwBNAi4AKwB2Ai4AMwB2Ai4AOwBNAi4AQwB8Ai4ASwB2Ai4AUwCT
Ai4AWwB2Ai4AYwCZAi4AawDDAi4AcwDQAkAAiwAsAUAAgwAaA0MAewB0A0MAgwAaA0kAqwAKB2MA
ewB0A2MAgwAaA2kAqwAeB4AAiwAsAYMAkwAsAYMAmwAsAYMAewB0A4kAqwArB6AAiwAsAakAgwBE
AsAAiwAsAckAgwBEAuAAiwAsAeMAuwAsAeMAUwB2AukAswAsAQMBwwAsAQMBywCNAwMBYwCUAwMB
0wAsAQkB+wAjAyMBwwAsASMB2wC+AyMB4wAVBCkB+wA+A0MBwwAsAUMBYwBuBEMB6wCYBEMB0wAs
AUkB+wAjA2MBwwAsAWMBYwD4BGMB6wCYBGMB0wAsAWkB+wBHA4MBwwAsAYMBYwAiBYMBywCNA4MB
0wAsAYkB+wBZA6MBwwAsAaMB2wBMBaMB4wCtBakB+wBrA8MBwwAsAcMBYwALBsMB8wA1BsMB0wAs
AeMBwwAsAeMB4wBDBgMCwwAsAQMC8wA1BgMCYwBuBAMC0wAsASMCwwAsASMCYwD4BCMC0wAsAUAC
+wAjA0MCgwAaA0MCowCXBmMCgwAaA2MCWwB2AoAC+wAsA4ACAwE1A8AC+wA+AwAD+wAjA0AD+wBH
A0ADAwEjA2ADAwEjA2AD+wBHA6AD+wBQA+ADAwEjA+AD+wBZAwAEAwEjAwAE+wBZA0AE+wBiA0AE
AwEjA4AE+wBrA6AE+wBrA8AEgwAaA8AEiwAsAeAEgwAaA+AEiwAsAQAFgwAaAwAFiwAsASAFgwAa
AyAFiwAsAUAFiwAsAWAFiwAsAYAFiwAsAYAFgwAaA6AFiwAsAcAFiwAsAcAFgwAaAwUAQAEHAEIB
CQBAAQsARAENAEIBDwBCAREAQgETAEIBFQBCARcAQgEZAEIBGwBCAR0AQgEfAEIBIQBCASMAQgEl
AEIBJwBCASkAQAErAEQBMQBEATMARAGCANUA6AAEAAEABQAFAAYABwAOAAgAEAAJABEADQATAA4A
AAAACeEBAADkB+YBAADSCOsBAACVCfABAACmCPUBAACvAvoBAAAtBv8BAADZCwQCAADvCgoCAADZ
Cw8CAACECxMCAAAuAhMCAACTAQ8CAADTARcCAgAEAAMAAgAFAAUAAgAGAAcAAgAHAAkAAgAJAAsA
AgAKAA0AAQALAA0AAgAOAA8AAgASABEAAgAWABMAAgAYABUAAgAaABcAAQAbABcAAgAfABkAAQAg
ABkAAgAkABsAAQAlABsAAgAtAB0AQQBIAE8AVgDaAO0A/AADAQSAAAABAAAAAAAAAAAAAAAAAJwB
AAAEAAAAAAAAAAAAAAARAScBAAAAAAQAAAAAAAAAAAAAABEBfwcAAAAACgAAAAAAAAAAAAAAGgEw
AQAAAAAOAAAAAAAAAAAAAAAjAYcGAAAAAA4AAAAAAAAAAAAAACMBywAAAAAABAAAAAAAAAAAAAAA
EQEACwAAAAAAAAAAAQAAAH8KAAASAAQAEwAEABQABwAAABAAJgDqAAAAEABVAOoAAAAAAFcA6gCL
AOMAiwAGAQAAAAAAX1Z0YmxHYXAxXzEwAF9WdGJsR2FwMl82MABfVnRibEdhcDJfODAAX1Z0YmxH
YXA1XzUxAF9WdGJsR2FwMl8xAENvbnRleHRWYWx1ZWAxAFRocmVhZFNhZmVPYmplY3RQcm92aWRl
cmAxAEludDMyAF9WdGJsR2FwMV80NQBfVnRibEdhcDFfOTUAX1Z0YmxHYXAzXzUAX1Z0YmxHYXA0
XzEwOQA8TW9kdWxlPgBHZXRUeXBlRnJvbUNMU0lEAFJIUwB4bE1TRE9TAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuTWFuYWdlZERUUwBUAERpc3Bvc2VfX0luc3RhbmNlX18AQ3JlYXRlX19JbnN0YW5jZV9f
AHZhbHVlX18AUHJvamVjdERhdGEAbXNjb3JsaWIATWljcm9zb2Z0LlZpc3VhbEJhc2ljAENvcnJ1
cHRMb2FkAElnbm9yZVJlYWRPbmx5UmVjb21tZW5kZWQAR3VpZABnZXRfUGFzc3dvcmQAc2V0X1Bh
c3N3b3JkAFdyaXRlUmVzUGFzc3dvcmQAU1RfMjkzYmE1ZTdhZTVkNGIyMjg4Nzk5MGZhNGM3ODgz
NWUAQ3JlYXRlSW5zdGFuY2UAZ2V0X0dldEluc3RhbmNlAGluc3RhbmNlAEdldEhhc2hDb2RlAGdl
dF9NZXNzYWdlAFZhcmlhYmxlAElFbnVtZXJhYmxlAEVkaXRhYmxlAGdldF9WaXNpYmxlAHNldF9W
aXNpYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEZpbGVuYW1lAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAR2V0VHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNl
dF9DdWx0dXJlAF9yZXNDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNh
dGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUARGlz
cElkQXR0cmlidXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAEd1aWRBdHRyaWJ1dGUASGVs
cEtleXdvcmRBdHRyaWJ1dGUAQ29tRXZlbnRJbnRlcmZhY2VBdHRyaWJ1dGUAR2VuZXJhdGVkQ29k
ZUF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1
dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAENvbVZpc2libGVBdHRyaWJ1dGUAQXNzZW1ibHlU
aXRsZUF0dHJpYnV0ZQBTdGFuZGFyZE1vZHVsZUF0dHJpYnV0ZQBIaWRlTW9kdWxlTmFtZUF0dHJp
YnV0ZQBJbnRlcmZhY2VUeXBlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRh
cmdldEZyYW1ld29ya0F0dHJpYnV0ZQBEZWJ1Z2dlckhpZGRlbkF0dHJpYnV0ZQBBc3NlbWJseUZp
bGVWZXJzaW9uQXR0cmlidXRlAExDSURDb252ZXJzaW9uQXR0cmlidXRlAE15R3JvdXBDb2xsZWN0
aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUARGVmYXVsdE1lbWJlckF0
dHJpYnV0ZQBUeXBlSWRlbnRpZmllckF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0
cmlidXRlAENvQ2xhc3NBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5
Q29weXJpZ2h0QXR0cmlidXRlAENMU0NvbXBsaWFudEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0Vu
dHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRp
YmlsaXR5QXR0cmlidXRlAG1fVmFsdWUAZ2V0X1ZhbHVlAHNldF9WYWx1ZQBHZXRPYmplY3RWYWx1
ZQBTYXZlAFN5c3RlbS5UaHJlYWRpbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmlu
ZwB4bE1hY2ludG9zaABNYXRoAF9Xb3JrYm9vawBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRh
c2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBMb2NhbABNYXJzaGFs
AE1pY3Jvc29mdC5WaXN1YWxCYXNpYy5NeVNlcnZpY2VzLkludGVybmFsAE1pY3Jvc29mdC5PZmZp
Y2UuSW50ZXJvcC5FeGNlbABTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwA
U1RfMjkzYmE1ZTdhZTVkNGIyMjg4Nzk5MGZhNGM3ODgzNWUuZGxsAGdldF9JdGVtAFN5c3RlbQBY
bFBsYXRmb3JtAEVudW0AQm9vbGVhbgBPcGVuAFN5c3RlbS5Db21wb25lbnRNb2RlbC5EZXNpZ24A
U2NyaXB0TWFpbgBPcmlnaW4AZ2V0X0FwcGxpY2F0aW9uAE15QXBwbGljYXRpb24AU3lzdGVtLkNv
bmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ARXhjZXB0
aW9uAEN1bHR1cmVJbmZvAG1fQXBwT2JqZWN0UHJvdmlkZXIAbV9Vc2VyT2JqZWN0UHJvdmlkZXIA
bV9Db21wdXRlck9iamVjdFByb3ZpZGVyAG1fTXlXZWJTZXJ2aWNlc09iamVjdFByb3ZpZGVyAGdl
dF9SZXNvdXJjZU1hbmFnZXIAU3lzdGVtLkNvZGVEb20uQ29tcGlsZXIAZ2V0X1VzZXIARGVsaW1p
dGVyAEVudGVyAENvbnZlcnRlcgBnZXRfQ29tcHV0ZXIATXlDb21wdXRlcgBfcmVzTWdyAENsZWFy
UHJvamVjdEVycm9yAFNldFByb2plY3RFcnJvcgBBY3RpdmF0b3IALmN0b3IALmNjdG9yAE1vbml0
b3IAU3lzdGVtLkRpYWdub3N0aWNzAE1pY3Jvc29mdC5WaXN1YWxCYXNpYy5EZXZpY2VzAGdldF9X
ZWJTZXJ2aWNlcwBNeVdlYlNlcnZpY2VzAE1pY3Jvc29mdC5WaXN1YWxCYXNpYy5BcHBsaWNhdGlv
blNlcnZpY2VzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBNaWNyb3NvZnQuVmlzdWFs
QmFzaWMuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5
c3RlbS5SZXNvdXJjZXMAU1RfMjkzYmE1ZTdhZTVkNGIyMjg4Nzk5MGZhNGM3ODgzNWUuTXkuUmVz
b3VyY2VzAE15UmVzb3VyY2VzAFNUXzI5M2JhNWU3YWU1ZDRiMjI4ODc5OTBmYTRjNzg4MzVlLlJl
c291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAZ2V0X1ZhcmlhYmxlcwBNeVNldHRpbmdz
AFVwZGF0ZUxpbmtzAGdldF9Xb3JrYm9va3MARXF1YWxzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAFN5
c3RlbS5Db2xsZWN0aW9ucwBSdW50aW1lSGVscGVycwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVz
dWx0cwBXb3JrYm9va0V2ZW50cwBBcHBFdmVudHMAZ2V0X0Rpc3BsYXlBbGVydHMAc2V0X0Rpc3Bs
YXlBbGVydHMAeGxXaW5kb3dzAEZvcm1hdABtX1N5bmNPYmplY3QAUmVsZWFzZUNvbU9iamVjdABN
eVByb2plY3QAUXVpdABFeGl0AGdldF9fRGVmYXVsdABEaWFsb2dSZXN1bHQAc2V0X1Rhc2tSZXN1
bHQAV29ya2Jvb2tFdmVudHNfRXZlbnQAQXBwRXZlbnRzX0V2ZW50AG1fQ29udGV4dABBZGRUb01y
dQBTaG93AEluZGV4AE1lc3NhZ2VCb3gAU1RfMjkzYmE1ZTdhZTVkNGIyMjg4Nzk5MGZhNGM3ODgz
NWUuTXkATm90aWZ5AGdldF9Bc3NlbWJseQBSZWFkT25seQAAMU0AeQAuAFIAZQBzAG8AdQByAGMA
ZQBzAC4ATQB5AFIAZQBzAG8AdQByAGMAZQBzAABJMAAwADAAMgA0ADUAMAAwAC0AMAAwADAAMAAt
ADAAMAAwADAALQBDADAAMAAwAC0AMAAwADAAMAAwADAAMAAwADAAMAA0ADYAARFQAGEAcwBzAHcA
bwByAGQAABFGAGkAbABlAFAAYQB0AGgAAAEAAAwKL7rq3ahHr04qyS8beqoABCABAQgDIAABBSAB
ARERBCABAQ4EIAEBAgUgAgEODgUgAQERRQcgBAEODg4OBCABAQYHIAIBEm0SbQUgAQESbQYVEkwB
EgwGFRJMARIIBhUSTAESZQYVEkwBEkgEIAATAAcAARJtEYDBBSAAEoDFByACAQ4SgMUEAAEcHAQA
AQEcCQcEDg4SLBKAlQcAARJtEYDRBQABHBJtBSAAEoDdBSAAEoDhBiABEoDlHAMgABwDIAAOBAAB
CBwGAAEBEoCVBgABEYD9DgMAAAEEIAECHAMgAAgEBwEeAAIeAAUQAQAeAAQKAR4ABAcBEwAGFRJM
ARMABwYVEnEBEwAGFRJxARMAAhMABAoBEwAFIAEBEwAIt3pcVhk04IkIsD9ffxHVCjoIiYRdzYCA
zJEEAQAAAAQDAAAABAIAAAAEAAAAAAEcARsBEwcGFRJMARIMBwYVEkwBEggHBhUSTAESZQcGFRJM
ARJIAwYSeQMGEn0DBhIYAgYcAgYIAwYRPAMGEVAEAAASDAQAABIIBAAAEmUEAAASSAQAABJ5BAAA
En0FAAEBEn0EAAASGAUgARIsHBMgDxIsDhwcHBwcHBwcHBwcHBwcBCAAEjgDIAACBCAAEm0HEAEB
HgAeAAcwAQEBEB4ABAgAEgwECAASCAQIABJlBAgAEkgECAASeQQIABJ9BAgAEhgFCAESLBwECAAS
OAMIAA4DCAACBCgAEwAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEA
AgAAAAAAKAEAI1NUXzI5M2JhNWU3YWU1ZDRiMjI4ODc5OTBmYTRjNzg4MzVlAAAFAQAAAAAWAQAR
Q29weXJpZ2h0IEAgIDIwMjEAAAUBAAEAACkBACQyZTllOGE3OC00NDdmLTRmZjItODI3Yi0wZDY1
YTEyN2EyZTcAAAwBAAcxLjAuMC4wAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQO
FEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNQgBAAEAAAAAAAgBAAAAAAAA
AAgBAIMHAAAAAAgBAA8AAAAAAAgBADwCAAAAAAgBAFcBAAAAAAgBAC4BAAAAAAgBAC4CAAAAAAgB
ABsBAAAAAAgBAK0BAAAAABgBAApNeVRlbXBsYXRlCDExLjAuMC4wAAAGAQACAAAAKQEAJDAwMDI0
NDEzLTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAAVgEAKE1pY3Jvc29mdC5PZmZpY2UuSW50
ZXJvcC5FeGNlbC5BcHBFdmVudHMoTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLkV4Y2VsLkFwcEV2
ZW50cwAAWAEAJDAwMDIwODEzLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0Ni5NaWNyb3NvZnQu
T2ZmaWNlLkludGVyb3AuRXhjZWwuQXBwRXZlbnRzX0V2ZW50AAApAQAkMDAwMjA4RDUtMDAwMC0w
MDAwLUMwMDAtMDAwMDAwMDAwMDQ2AABfAQBaU3lzdGVtLk9iamVjdCwgbXNjb3JsaWIsIFZlcnNp
b249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRl
MDg5AAApAQAkMDAwMjA4REEtMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2AAApAQAkMDAwMjQ0
MTItMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2AABgAQAtTWljcm9zb2Z0Lk9mZmljZS5JbnRl
cm9wLkV4Y2VsLldvcmtib29rRXZlbnRzLU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5X
b3JrYm9va0V2ZW50cwAAXQEAJDAwMDIwODEzLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NjNN
aWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhjZWwuV29ya2Jvb2tFdmVudHNfRXZlbnQAACkBACQw
MDAyMDhEQi0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAAA0BAAhfRGVmYXVsdAAAUwEAJDAw
MDIwODEzLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NilNaWNyb3NvZnQuT2ZmaWNlLkludGVy
b3AuRXhjZWwuWGxQbGF0Zm9ybQAAYQEANFN5c3RlbS5XZWIuU2VydmljZXMuUHJvdG9jb2xzLlNv
YXBIdHRwQ2xpZW50UHJvdG9jb2wSQ3JlYXRlX19JbnN0YW5jZV9fE0Rpc3Bvc2VfX0luc3RhbmNl
X18AAAAQAQALTXkuQ29tcHV0ZXIAABMBAA5NeS5BcHBsaWNhdGlvbgAADAEAB015LlVzZXIAABMB
AA5NeS5XZWJTZXJ2aWNlcwAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNv
dXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQ
dWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJl
c291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABcRgAAAAAAAAAAAAB2RgAAACAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAaEYAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA
/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAY
AACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWGAAAOwD
AAAAAAAAAAAAAOwDNAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAAB
AAAAAQAAAAAAAAABAAAAAAA/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIA
RgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARM
AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAANABiADAA
AAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBl
AAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfADIA
OQAzAGIAYQA1AGUANwBhAGUANQBkADQAYgAyADIAOAA4ADcAOQA5ADAAZgBhADQAYwA3ADgAOAAz
ADUAZQAAADAACAABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAA
KAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AMgA5ADMAYgBhADUAZQA3AGEAZQA1
AGQANABiADIAMgA4ADgANwA5ADkAMABmAGEANABjADcAOAA4ADMANQBlAC4AZABsAGwAAABIABIA
AQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAg
ADIAMAAyADEAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgA
KAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwAyADkAMwBiAGEANQBl
ADcAYQBlADUAZAA0AGIAMgAyADgAOAA3ADkAOQAwAGYAYQA0AGMANwA4ADgAMwA1AGUALgBkAGwA
bAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMgA5ADMAYgBhADUAZQA3
AGEAZQA1AGQANABiADIAMgA4ADgANwA5ADkAMABmAGEANABjADcAOAA4ADMANQBlAAAANAAIAAEA
UAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBz
AGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAwAAACINgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Truncate Tables"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{19076F7B-11A0-45A0-805C-64633EC1FBD2}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Truncate Tables"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0C9F8C50-FC43-49BD-B8BE-75CE83CF736B}"
          SQLTask:SqlStatementSource="TRUNCATE TABLE [dbo].[RiversideGasComplianceLive];&#xA;&#xA;TRUNCATE TABLE [dbo].[RiversideGasComplianceCompleted]" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{8A5AAA75-E2C4-42FE-AE2D-E9DC7E3CE3D1}"
      DTS:From="Package\Truncate Tables"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Remove Password Protect" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{6D06B6E2-F713-4A78-B52A-355F05981153}"
      DTS:From="Package\Import Live Data"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Import Completed Data" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{2990DEE9-8EF1-43C5-8A05-B605EE1C2489}"
      DTS:From="Package\Remove Password Protect"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Import Live Data" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{27385387-ED90-4515-BAAF-1DD961606447}"
      DTS:From="Package\Import Completed Data"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Add Password Protect" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="181,42"
          Id="Package\Add Password Protect"
          TopLeft="196,397" />
        <NodeLayout
          Size="190,42"
          Id="Package\Import Completed Data"
          TopLeft="187,309" />
        <NodeLayout
          Size="158,43"
          Id="Package\Import Live Data"
          TopLeft="201,221" />
        <NodeLayout
          Size="201,42"
          Id="Package\Remove Password Protect"
          TopLeft="178,143" />
        <NodeLayout
          Size="155,42"
          Id="Package\Truncate Tables"
          TopLeft="203,57" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="279.5,99">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,44"
              Start="0,0"
              End="0,36.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="281,264">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,45"
              Start="0,0"
              End="0,37.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,37.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="279.25,185">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,36"
              Start="0,0"
              End="0,28.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="284.25,351">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46"
              Start="0,0"
              End="0,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Import Completed Data">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="136,42"
          Id="Package\Import Completed Data\Import Data"
          TopLeft="238,176" />
        <NodeLayout
          Size="144,42"
          Id="Package\Import Completed Data\Excel Source"
          TopLeft="203,70" />
        <EdgeLayout
          Id="Package\Import Completed Data.Paths[Excel Source Output]"
          TopLeft="275,112">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="31,64"
              Start="0,0"
              End="31,56.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28" />
                  <mssgle:CubicBezierSegment
                    Point1="0,28"
                    Point2="0,32"
                    Point3="4,32" />
                  <mssgle:LineSegment
                    End="27,32" />
                  <mssgle:CubicBezierSegment
                    Point1="27,32"
                    Point2="31,32"
                    Point3="31,36" />
                  <mssgle:LineSegment
                    End="31,56.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Import Completed Data\Excel Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Import Completed Data\Import Data">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Import Live Data">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="147,42"
          Id="Package\Import Live Data\Imported data"
          TopLeft="209,171" />
        <NodeLayout
          Size="144,42"
          Id="Package\Import Live Data\Excel Source"
          TopLeft="193,20" />
        <EdgeLayout
          Id="Package\Import Live Data.Paths[Excel Source Output]"
          TopLeft="265,62">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="17.5,109"
              Start="0,0"
              End="17.5,101.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,50.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,50.5"
                    Point2="0,54.5"
                    Point3="4,54.5" />
                  <mssgle:LineSegment
                    End="13.5,54.5" />
                  <mssgle:CubicBezierSegment
                    Point1="13.5,54.5"
                    Point2="17.5,54.5"
                    Point3="17.5,58.5" />
                  <mssgle:LineSegment
                    End="17.5,101.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Import Live Data\Excel Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Import Live Data\Imported data">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>